import openjava.mop.*;
import openjava.ptree.*;
import openjava.syntax.*;

/**
 * MemoClass : la classe des classes (instantiates Metaclass) qui se souviennent de leurs instances.
 */
public class MemoClass instantiates Metaclass extends OJClass {

    public void translateDefinition() throws MOPException {

    	// On définit un attribut instances pour la classe actuelle, un private static String.
			// private static java.lang.String instances;
			OJField instances = new OJField(this, OJModifier.forModifier(OJModifier.STATIC).add(OJModifier.PRIVATE), OJSystem.STRING, "instances");
			addField(instances);

			// Définit un statement (ligne de code) qui affiche instances.
			StatementList affInstancesBody = new StatementList();
			// System.out.println( instances );
			affInstancesBody.add(makeStatement("System.out.println( instances );"));

			// On définit une méthode affInstances en public static qui renvoit void et dont le corps est affInstancesBody.
			// public static void affInstances() { System.out.println( instances ); }
			OJMethod affInstances = new OJMethod(this, OJModifier.forModifier(OJModifier.STATIC).add(OJModifier.PUBLIC), OJSystem.VOID, "affInstances", new ParameterList(), null, affInstancesBody);
			addMethod(affInstances);

			// Instanciation tardive de instances à mettre dans le constructeur.
			IfStatement lazyInstantiation = new IfStatement(
				// if (Personne.instances == null)
				new BinaryExpression(
					new FieldAccess(this, "instances"), BinaryExpression.EQUAL, Literal.constantNull()
				),
				// Corps du if
				new StatementList(
					new ExpressionStatement(
						new AssignmentExpression(
							// Personne.instances = new java.lang.String( "" );
							new FieldAccess(this, "instances"), AssignmentExpression.EQUALS, new AllocationExpression(OJSystem.STRING, new ExpressionList(Literal.constantEmptyString())))
						)
					)
				);

			// Ajout de l'instanciation tardive dans la liste de code.
			StatementList instancesManager = new StatementList();
			instancesManager.add(lazyInstantiation);


			// Ajout de l'instance courante à la liste des instances.
			ExpressionStatement instanceClassName = new ExpressionStatement(
					new AssignmentExpression(
						// Personne.instances += nom;
						new FieldAccess(this, "instances"), "+=", Literal.makeLiteral("{" + getSimpleName() + ">" + getSuperclass().getSimpleName() +  ": "))
					);

			instancesManager.add(instanceClassName);

			// Ajout des attributs de l'instance courante.
			OJField[] fields = getAllFields();
			String fieldName;
			for (int i = 0; i < fields.length; i++) {
				fieldName = fields[i].getName();
				if (!fieldName.equals("instances")) {
					instancesManager.add(new ExpressionStatement(new AssignmentExpression(new FieldAccess(this, "instances"), "+=", Literal.makeLiteral(fieldName + "="))));
					instancesManager.add(new ExpressionStatement(new AssignmentExpression(new FieldAccess(this, "instances"), "+=", new FieldAccess(fieldName))));
					instancesManager.add(new ExpressionStatement(new AssignmentExpression(new FieldAccess(this, "instances"), "+=", Literal.makeLiteral(","))));
				}
			}

			// Ajout des méthodes de l'instance courante.
			OJMethod[] methods = getDeclaredMethods();
			String methodName;
			for (int i = 0; i < methods.length; i++) {
				methodName = methods[i].getName();
				if (!methodName.equals("affInstances")) {
					instancesManager.add(new ExpressionStatement(new AssignmentExpression(new FieldAccess(this, "instances"), "+=", Literal.makeLiteral(methodName + ","))));
				}
			}

			ExpressionStatement instanceClassNameEnd = new ExpressionStatement(new AssignmentExpression(new FieldAccess(this, "instances"), "+=", Literal.makeLiteral("},\\n")));
			instancesManager.add(instanceClassNameEnd);

			// Pour tous les constructeurs de la classe,
			OJConstructor[] constructor = getDeclaredConstructors();
		  for (int i = 0; i < constructor.length; i++) {
		  	// On ajoute dans le corps du constructeur notre management d'instances.
				constructor[i].getBody().addAll(instancesManager);
			}
    }
}
